[{"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\index.tsx":"1","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\AppMenu.tsx":"2","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\AppHeader.tsx":"3","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\page\\ResourcePage.tsx":"4","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\security\\cacheRefresh\\SecurityCacheRefresh.tsx":"5","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\security\\role\\SecurityRole.tsx":"6","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\Main.tsx":"7","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\Index.tsx":"8","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\security\\user\\SecurityUser.tsx":"9","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\reportWebVitals.ts":"10","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\Login.tsx":"11","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\LoadingAndDialog.tsx":"12","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\errors\\UnAuthorization.tsx":"13","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\button\\ResourceButton.tsx":"14","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\menu\\ResourceMenu.tsx":"15","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\message\\ResourceMessage.tsx":"16","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\tab\\ResourceTab.tsx":"17","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\label\\ResourceLabel.tsx":"18","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useAccessToken.ts":"19","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useCodes.ts":"20","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\usePage.ts":"21","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useWindowSize.ts":"22","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\system\\property\\SystemProperty.tsx":"23","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\common\\mergeValid.ts":"24","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useButtons.tsx":"25","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useTableModel.tsx":"26","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useLabels.tsx":"27","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\common\\commonValue.ts":"28","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\PageHeaderInfo.tsx":"29","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\DefaultPage.tsx":"30","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useAsyncGetAction.tsx":"31","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\App.tsx":"32","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useAsyncAction.tsx":"33","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\common\\issueAccessToken.ts":"34"},{"size":613,"mtime":1613988517324,"results":"35","hashOfConfig":"36"},{"size":897,"mtime":1628074442725,"results":"37","hashOfConfig":"36"},{"size":8115,"mtime":1628074445036,"results":"38","hashOfConfig":"36"},{"size":9358,"mtime":1624770145941,"results":"39","hashOfConfig":"36"},{"size":1559,"mtime":1624770174123,"results":"40","hashOfConfig":"36"},{"size":23200,"mtime":1624770181619,"results":"41","hashOfConfig":"36"},{"size":3792,"mtime":1624770248737,"results":"42","hashOfConfig":"36"},{"size":1559,"mtime":1624770614683,"results":"43","hashOfConfig":"36"},{"size":14735,"mtime":1624785008451,"results":"44","hashOfConfig":"36"},{"size":425,"mtime":1610448755299,"results":"45","hashOfConfig":"36"},{"size":2668,"mtime":1618828287890,"results":"46","hashOfConfig":"36"},{"size":1092,"mtime":1619690762922,"results":"47","hashOfConfig":"36"},{"size":551,"mtime":1618830557712,"results":"48","hashOfConfig":"36"},{"size":13524,"mtime":1624769933787,"results":"49","hashOfConfig":"36"},{"size":20255,"mtime":1624769933789,"results":"50","hashOfConfig":"36"},{"size":9948,"mtime":1624769933790,"results":"51","hashOfConfig":"36"},{"size":12570,"mtime":1624769933792,"results":"52","hashOfConfig":"36"},{"size":11120,"mtime":1624769933787,"results":"53","hashOfConfig":"36"},{"size":1649,"mtime":1628075562536,"results":"54","hashOfConfig":"36"},{"size":682,"mtime":1628075376069,"results":"55","hashOfConfig":"36"},{"size":1847,"mtime":1628075565854,"results":"56","hashOfConfig":"36"},{"size":1078,"mtime":1614072784953,"results":"57","hashOfConfig":"36"},{"size":11359,"mtime":1624769933796,"results":"58","hashOfConfig":"36"},{"size":350,"mtime":1621864074548,"results":"59","hashOfConfig":"36"},{"size":914,"mtime":1619094192525,"results":"60","hashOfConfig":"36"},{"size":684,"mtime":1624269791112,"results":"61","hashOfConfig":"36"},{"size":510,"mtime":1622205618748,"results":"62","hashOfConfig":"36"},{"size":73,"mtime":1620297128310,"results":"63","hashOfConfig":"36"},{"size":455,"mtime":1624769933785,"results":"64","hashOfConfig":"36"},{"size":244,"mtime":1624770242887,"results":"65","hashOfConfig":"36"},{"size":2967,"mtime":1628075543985,"results":"66","hashOfConfig":"36"},{"size":518,"mtime":1624769933784,"results":"67","hashOfConfig":"36"},{"size":4387,"mtime":1628073675925,"results":"68","hashOfConfig":"36"},{"size":762,"mtime":1628074619257,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"sxr7gy",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\index.tsx",[],["142","143"],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\AppMenu.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\AppHeader.tsx",["144"],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\page\\ResourcePage.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\security\\cacheRefresh\\SecurityCacheRefresh.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\security\\role\\SecurityRole.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\Main.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\Index.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\security\\user\\SecurityUser.tsx",["145"],"import axios from 'axios';\r\nimport {\r\n  Button,\r\n  CloseButton,\r\n  Column,\r\n  Container,\r\n  DeleteDialog,\r\n  Field,\r\n  Form,\r\n  Icon,\r\n  InFormContainer,\r\n  Input,\r\n  Label,\r\n  LabelInput,\r\n  LabelSelect,\r\n  Loading,\r\n  Modal,\r\n  Row,\r\n  SaveButton,\r\n  Table,\r\n  TableModelProps,\r\n  useChange,\r\n} from 'doif-react-kit';\r\nimport { FormEvent, useCallback, useEffect, useState } from 'react';\r\nimport mergeValid from '../../../common/mergeValid';\r\nimport PageHeaderInfo from '../../../components/PageHeaderInfo';\r\nimport useAsyncAction, {\r\n  deleteAction,\r\n  postAction,\r\n  putAction,\r\n} from '../../../hooks/useAsyncAction';\r\nimport useAsyncGetAction, { getAction } from '../../../hooks/useAsyncGetAction';\r\nimport useButtons, { ButtonInfoProps } from '../../../hooks/useButtons';\r\nimport useCodes from '../../../hooks/useCodes';\r\nimport useLabels from '../../../hooks/useLabels';\r\nimport usePage from '../../../hooks/usePage';\r\nimport useTableModel from '../../../hooks/useTableModel';\r\n\r\n// table row data\r\nlet row: any = {};\r\n// button 클릭시 등록/수정 타입\r\nlet buttonType: string = '';\r\n\r\n// userRole checked\r\nlet checkedUserRole: any = {};\r\n\r\n/**\r\n * 유저 관리 페이지\r\n * @returns SecurityUser\r\n */\r\nfunction SecurityUser() {\r\n  /******************************************************************\r\n   * 기본 데이터 및 state\r\n   *******************************************************************/\r\n  // 페이지 데이터 조회\r\n  const [pageData] = usePage('/api/pages/security/user');\r\n  // 코드 조회\r\n  const [userStatusCodes]: any = useCodes('USER_STATUS', pageData);\r\n\r\n  // 초기 페이지 상태\r\n  const initPageState = {\r\n    openModal: false,\r\n    disableButton: true,\r\n    openDeleteDialog: false,\r\n    disableItem: false,\r\n    openRoleModal: false,\r\n  };\r\n\r\n  // 페이지 상태\r\n  const [pageState, setPageState] = useState(initPageState);\r\n\r\n  // form 데이터\r\n  const [form, onChangeForm, replaceForm, resetForm] = useChange({\r\n    id: '',\r\n    name: '',\r\n    password: '',\r\n    status: 'VALID',\r\n    profilePicturePath: '',\r\n  });\r\n  // 프로필 이미지\r\n  const [profilePicture, setProfilePicture] = useState<File>();\r\n\r\n  const { id, name, password, status, profilePicturePath } = form;\r\n\r\n  // 라벨들\r\n  const {\r\n    LABEL_SECURITY_USER_ID,\r\n    LABEL_SECURITY_USER_NAME,\r\n    LABEL_SECURITY_USER_PASSWORD,\r\n    LABEL_SECURITY_USER_STATUS,\r\n    LABEL_SECURITY_USER_CAPTION,\r\n    LABEL_SECURITY_USER_LIST,\r\n    LABEL_SECURITY_USER_ROLE_CAPTION,\r\n    LABEL_SECURITY_USER_PROFILE_PICTURE,\r\n  } = useLabels(pageData);\r\n\r\n  // 테이블 model\r\n  const model: TableModelProps[] = useTableModel(\r\n    [\r\n      {\r\n        label: 'LABEL_SECURITY_USER_ID',\r\n        name: 'id',\r\n        width: 250,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SECURITY_USER_NAME',\r\n        name: 'name',\r\n        width: 250,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SECURITY_USER_STATUS',\r\n        name: 'statusName',\r\n        width: 120,\r\n        formatter: (cellValue: any) => {\r\n          return cellValue.props.value === '유효' ? (\r\n            <span style={{ color: '#02c902' }}>{cellValue}</span>\r\n          ) : (\r\n            <span style={{ color: '#fc3d3d' }}>{cellValue}</span>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    pageData,\r\n  );\r\n\r\n  // Role 테이블 모델\r\n  const roleTableModel: TableModelProps[] = useTableModel(\r\n    [\r\n      {\r\n        label: 'LABEL_SECURITY_USER_ROLE_ID',\r\n        name: 'roleId',\r\n        width: 100,\r\n      },\r\n      {\r\n        label: 'LABEL_SECURITY_USER_ROLE_NAME',\r\n        name: 'name',\r\n        width: 250,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SECURITY_USER_ROLE_DESCRIPTION',\r\n        name: 'description',\r\n        width: 450,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: '',\r\n        name: 'checked',\r\n        width: 50,\r\n        formatter: (cellvalue: any, rowValue: any) => {\r\n          return (\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={checkedUserRole[rowValue.roleId]}\r\n              onChange={(e) => {\r\n                checkedUserRole[rowValue.roleId] = e.target.checked;\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n      {\r\n        label: 'LABEL_SECURITY_USER_ROLE_STATUS',\r\n        name: 'statusName',\r\n        width: 120,\r\n        formatter: (cellValue: any) => {\r\n          return cellValue.props.value === '가능' ? (\r\n            <span style={{ color: '#02c902' }}>{cellValue}</span>\r\n          ) : (\r\n            <span style={{ color: '#fc3d3d' }}>{cellValue}</span>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        label: '',\r\n        name: 'profilePicture',\r\n        hidden: true,\r\n      },\r\n    ],\r\n    pageData,\r\n  );\r\n\r\n  /******************************************************************\r\n   * Action 함수들\r\n   ******************************************************************/\r\n\r\n  // 유저 등록/수정/삭제 시 성공 콜백\r\n  const asyncSucCallback = () => {\r\n    setPageState((state) => ({\r\n      ...state,\r\n      openModal: false,\r\n      openDeleteDialog: false,\r\n    }));\r\n    getUsers();\r\n  };\r\n\r\n  // 유저 데이터 조회\r\n  const [users, getUsers]: any = useAsyncGetAction(\r\n    () => pageData && getAction('/api/users'),\r\n    [pageData],\r\n    {\r\n      skip: false,\r\n      onSuccess: () => {\r\n        setPageState(initPageState);\r\n      },\r\n    },\r\n  );\r\n\r\n  // 유저 등록\r\n  const [postUser, postUserValid] = useAsyncAction(\r\n    () => postAction('/api/users', form),\r\n    {\r\n      onSuccess: () => {\r\n        if (profilePicture) {\r\n          const formData = new FormData();\r\n          formData.append('file', profilePicture);\r\n          axios\r\n            .put('/api/users/' + form.id + '/profile-picture', formData)\r\n            .then(() => asyncSucCallback());\r\n        } else {\r\n          asyncSucCallback();\r\n        }\r\n      },\r\n    },\r\n  );\r\n\r\n  // 유저 수정\r\n  const [putUser, putUserValid] = useAsyncAction(\r\n    () => putAction('/api/users/' + row.id, form),\r\n    {\r\n      onSuccess: () => {\r\n        if (profilePicture) {\r\n          const formData = new FormData();\r\n          formData.append('file', profilePicture);\r\n          axios\r\n            .put('/api/users/' + form.id + '/profile-picture', formData)\r\n            .then(() => asyncSucCallback());\r\n        } else {\r\n          asyncSucCallback();\r\n        }\r\n      },\r\n    },\r\n  );\r\n\r\n  // 유저 삭제\r\n  const [deleteUser] = useAsyncAction(\r\n    () => deleteAction('/api/users/' + row.id),\r\n    {\r\n      onSuccess: asyncSucCallback,\r\n    },\r\n  );\r\n\r\n  // 유저 Role 조회\r\n  const [userRoles, getUserRoles] = useAsyncGetAction(\r\n    () => pageData && getAction('/api/users/' + row.id + '/user-roles'),\r\n    [pageData],\r\n    {\r\n      skip: true,\r\n    },\r\n  );\r\n\r\n  // 유저 Role 할당\r\n  const [allocateUserRole] = useAsyncAction(\r\n    () => {\r\n      const checkedRoleIds = [];\r\n      for (const roleId in checkedUserRole) {\r\n        if (checkedUserRole[roleId]) {\r\n          checkedRoleIds.push(roleId);\r\n        }\r\n      }\r\n\r\n      return postAction('/api/user-roles', {\r\n        userId: row.id,\r\n        roleIds: checkedRoleIds,\r\n      });\r\n    },\r\n    {\r\n      onSuccess: () => {\r\n        setPageState((state) => ({ ...state, openRoleModal: false }));\r\n      },\r\n    },\r\n  );\r\n\r\n  // 프로필 사진 삭제\r\n  const [deleteProfilePicture] = useAsyncAction(() =>\r\n    deleteAction('/api/users/' + form.id + '/profile-picture'),\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (userRoles) {\r\n      userRoles.content.forEach((userRole: any) => {\r\n        checkedUserRole[userRole.roleId] = userRole.checked;\r\n      });\r\n    }\r\n  }, [userRoles]);\r\n\r\n  /******************************************************************\r\n   * 클라이언트 함수들\r\n   ******************************************************************/\r\n  // 테이블 버튼들\r\n  const buttonInfos: ButtonInfoProps[] = [\r\n    {\r\n      id: 'BTN_SECURITY_USER_ADD',\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPageState((state) => ({\r\n          ...state,\r\n          disableItem: false,\r\n          openModal: true,\r\n        }));\r\n        buttonType = 'post';\r\n\r\n        resetForm();\r\n      },\r\n    },\r\n    {\r\n      id: 'BTN_SECURITY_USER_MODIFY',\r\n      disable: pageState.disableButton,\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPageState((state) => ({\r\n          ...state,\r\n          disableItem: true,\r\n          openModal: true,\r\n        }));\r\n        buttonType = 'put';\r\n\r\n        replaceForm({\r\n          id: row.id,\r\n          name: row.name,\r\n          status: row.status,\r\n          profilePicturePath: row.profilePicture,\r\n        });\r\n      },\r\n    },\r\n    {\r\n      id: 'BTN_SECURITY_USER_DELETE',\r\n      disable: pageState.disableButton,\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPageState((state) => ({ ...state, openDeleteDialog: true }));\r\n      },\r\n    },\r\n    {\r\n      id: 'BTN_SECURITY_USER_ROLE_FIND',\r\n      disable: pageState.disableButton,\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        checkedUserRole = {};\r\n        getUserRoles();\r\n        setPageState((state) => ({ ...state, openRoleModal: true }));\r\n      },\r\n    },\r\n  ];\r\n  const buttons = useButtons(pageData && pageData.buttonMap, buttonInfos);\r\n\r\n  // 테이블 select 시 콜백\r\n  const onSelectRow = useCallback((id: string, rowValue: any) => {\r\n    row = rowValue;\r\n    setPageState((state) => ({\r\n      ...state,\r\n      disableButton: false,\r\n    }));\r\n  }, []);\r\n\r\n  // 사용자 저장\r\n  const onSaveUser = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (buttonType === 'post') {\r\n      postUser();\r\n    } else if (buttonType === 'put') {\r\n      putUser();\r\n    }\r\n  };\r\n\r\n  // 사용자 Role 할당\r\n  const onAllocateUserRole = () => {\r\n    allocateUserRole();\r\n  };\r\n\r\n  // 이미지 변경\r\n  const onChangeProfilePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      setProfilePicture(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // 이미지 삭제\r\n  const onProfilePictureDelete = () => {\r\n    deleteProfilePicture();\r\n  };\r\n\r\n  // Validation\r\n  const userValid = mergeValid([postUserValid, putUserValid]);\r\n\r\n  // 페이지 데이터 로딩 전엔 Loading 표시\r\n  if (!pageData) {\r\n    return <Loading />;\r\n  }\r\n\r\n  // user role 할당 버튼\r\n  const allocateButton = pageData.buttonMap['BTN_SECURITY_USER_ROLE_ALLOCATE'];\r\n  // 프로필 삭제 버튼\r\n  const deleteProfilePictureButton =\r\n    pageData.buttonMap['BTN_SECURITY_USER_DELETE_PROFILE_PICTURE'];\r\n\r\n  return (\r\n    <>\r\n      <DeleteDialog\r\n        visible={pageState.openDeleteDialog}\r\n        onConfirm={deleteUser}\r\n        onCancel={() =>\r\n          setPageState((state) => ({ ...state, openDeleteDialog: false }))\r\n        }\r\n      />\r\n\r\n      <PageHeaderInfo pageData={pageData} />\r\n\r\n      <Table\r\n        caption={LABEL_SECURITY_USER_LIST}\r\n        model={model}\r\n        buttons={buttons}\r\n        data={users ? users.pageInfo.content : []}\r\n        onSelectRow={onSelectRow}\r\n      />\r\n\r\n      {/* 사용자 등록/수정 모달 */}\r\n      <Modal visible={pageState.openModal} title={LABEL_SECURITY_USER_CAPTION}>\r\n        <Form onSubmit={onSaveUser}>\r\n          <Row>\r\n            <LabelInput\r\n              required\r\n              label={LABEL_SECURITY_USER_ID}\r\n              value={id}\r\n              onChange={onChangeForm}\r\n              name=\"id\"\r\n              disabled={pageState.disableItem}\r\n              validation={userValid.id}\r\n            />\r\n          </Row>\r\n          {!pageState.disableItem && (\r\n            <Row>\r\n              <LabelInput\r\n                required\r\n                label={LABEL_SECURITY_USER_PASSWORD}\r\n                value={password}\r\n                onChange={onChangeForm}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                validation={userValid.password}\r\n              />\r\n            </Row>\r\n          )}\r\n          <Row>\r\n            <LabelInput\r\n              required\r\n              label={LABEL_SECURITY_USER_NAME}\r\n              value={name}\r\n              onChange={onChangeForm}\r\n              name=\"name\"\r\n              validation={userValid.name}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <LabelSelect\r\n              required\r\n              label={LABEL_SECURITY_USER_STATUS}\r\n              data={userStatusCodes}\r\n              value={status}\r\n              onChange={onChangeForm}\r\n              name=\"status\"\r\n              validation={userValid.status}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <Column>\r\n              <Label>{LABEL_SECURITY_USER_PROFILE_PICTURE}</Label>\r\n              <Field>\r\n                <Input\r\n                  variant=\"underline\"\r\n                  type=\"file\"\r\n                  name=\"profilePicture\"\r\n                  onChange={onChangeProfilePicture}\r\n                />\r\n                {deleteProfilePictureButton && pageState.disableItem && (\r\n                  <Button onClick={onProfilePictureDelete}>삭제</Button>\r\n                )}\r\n              </Field>\r\n            </Column>\r\n          </Row>\r\n          <Row>\r\n            <Column>\r\n              <Label>{LABEL_SECURITY_USER_PROFILE_PICTURE}</Label>\r\n              <Field>\r\n                <img src={profilePicturePath} />\r\n              </Field>\r\n            </Column>\r\n          </Row>\r\n          <InFormContainer>\r\n            <SaveButton />\r\n            <CloseButton\r\n              onClick={() =>\r\n                setPageState((state) => ({ ...state, openModal: false }))\r\n              }\r\n            />\r\n          </InFormContainer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* 사용자 Role 모달 */}\r\n      <Modal\r\n        visible={pageState.openRoleModal}\r\n        title={LABEL_SECURITY_USER_ROLE_CAPTION}\r\n        width=\"1200px\"\r\n      >\r\n        <Table\r\n          caption={LABEL_SECURITY_USER_ROLE_CAPTION}\r\n          model={roleTableModel}\r\n          data={userRoles ? userRoles.content : []}\r\n          disableFilters\r\n        />\r\n\r\n        <Container align=\"center\" style={{ marginTop: '15px' }}>\r\n          {allocateButton && (\r\n            <Button onClick={onAllocateUserRole}>\r\n              <Icon icon={allocateButton.icon} />\r\n              {allocateButton.name}\r\n            </Button>\r\n          )}\r\n          <CloseButton\r\n            onClick={() =>\r\n              setPageState((state) => ({ ...state, openRoleModal: false }))\r\n            }\r\n          />\r\n        </Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SecurityUser;\r\n","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\Login.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\LoadingAndDialog.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\errors\\UnAuthorization.tsx",[],["146","147"],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\button\\ResourceButton.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\menu\\ResourceMenu.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\message\\ResourceMessage.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\tab\\ResourceTab.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\developer\\label\\ResourceLabel.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useAccessToken.ts",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useCodes.ts",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\usePage.ts",["148"],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useWindowSize.ts",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\system\\property\\SystemProperty.tsx",["149","150","151","152"],"import {\r\n  CloseButton,\r\n  DeleteDialog,\r\n  Form,\r\n  InFormContainer,\r\n  LabelInput,\r\n  LabelSelect,\r\n  Loading,\r\n  Modal,\r\n  PageHeader,\r\n  Row,\r\n  SaveButton,\r\n  SearchButton,\r\n  Table,\r\n  TableModelProps,\r\n  useChange,\r\n} from 'doif-react-kit';\r\nimport { FormEvent, useCallback, useMemo, useState } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { defaultValue } from '../../../common/commonValue';\r\nimport mergeValid from '../../../common/mergeValid';\r\nimport PageHeaderInfo from '../../../components/PageHeaderInfo';\r\nimport useAsyncAction, {\r\n  deleteAction,\r\n  postAction,\r\n  putAction,\r\n} from '../../../hooks/useAsyncAction';\r\nimport useAsyncGetAction, { getAction } from '../../../hooks/useAsyncGetAction';\r\nimport useButtons, { ButtonInfoProps } from '../../../hooks/useButtons';\r\nimport useCodes from '../../../hooks/useCodes';\r\nimport useLabels from '../../../hooks/useLabels';\r\nimport usePage from '../../../hooks/usePage';\r\nimport useTableModel from '../../../hooks/useTableModel';\r\n\r\n// table row data\r\nlet row: any = {};\r\n// button 클릭시 등록/수정 타입\r\nlet buttonType: string = '';\r\n\r\n/**\r\n * 시스템 속성 관리 페이지\r\n * @returns SystemProperty\r\n */\r\n\r\nfunction SystemProperty() {\r\n  /******************************************************************\r\n   * 기본 데이터 및 state\r\n   *******************************************************************/\r\n  // 페이지 데이터 조회\r\n  const [pageData] = usePage('/api/pages/system/property');\r\n\r\n  // 초기 페이지 상태\r\n  const initPageState = {\r\n    openModal: false,\r\n    disableModifyButton: true,\r\n    disableDeleteButton: true,\r\n    openDeleteDialog: false,\r\n    disableItem: false,\r\n  };\r\n\r\n  // 페이지 상태\r\n  const [pageState, setPageState] = useState(initPageState);\r\n\r\n  // form 데이터\r\n  const [form, onChangeForm, replaceForm, resetForm] = useChange({\r\n    propertyGroup: '',\r\n    property: '',\r\n    value: '',\r\n    description: '',\r\n    updatable: 'true',\r\n  });\r\n\r\n  // 검색 조건 데이터\r\n  const [searchForm, onChangeSearchForm, replaceSearchForm, resetSearchForm] =\r\n    useChange({\r\n      searchPropertyGroup: '',\r\n    });\r\n\r\n  const { propertyGroup, property, value, description, updatable } = form;\r\n  const { searchPropertyGroup } = searchForm;\r\n\r\n  // 라벨들\r\n  const {\r\n    LABEL_SYSTEM_PROPERTY_GROUP,\r\n    LABEL_SYSTEM_PROPERTY_PROPERTY,\r\n    LABEL_SYSTEM_PROPERTY_VALUE,\r\n    LABEL_SYSTEM_PROPERTY_DESCRIPTION,\r\n    LABEL_SYSTEM_PROPERTY_UPDATEABLE,\r\n    LABEL_SYSTEM_PROPERTY_LIST,\r\n    LABEL_SYSTEM_PROPERTY_CAPTION,\r\n  } = useLabels(pageData);\r\n\r\n  // 코드\r\n  const [propertyGroupType]: any = useCodes('PROPERTY_GROUP_TYPE', pageData);\r\n  const updatableCodes = useMemo(\r\n    () => [\r\n      {\r\n        code: 'true',\r\n        name: '변경 가능',\r\n      },\r\n      {\r\n        code: 'false',\r\n        name: '변경 불가능',\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n  // 테이블 model\r\n  const model: TableModelProps[] = useTableModel(\r\n    [\r\n      {\r\n        label: 'LABEL_SYSTEM_PROPERTY_GROUP_NAME',\r\n        name: 'propertyGroupName',\r\n        width: 200,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SYSTEM_PROPERTY_GROUP',\r\n        name: 'propertyGroup',\r\n        width: 200,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SYSTEM_PROPERTY_PROPERTY',\r\n        name: 'property',\r\n        width: 300,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SYSTEM_PROPERTY_VALUE',\r\n        name: 'value',\r\n        width: 350,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SYSTEM_PROPERTY_DESCRIPTION',\r\n        name: 'description',\r\n        width: 450,\r\n        align: 'left',\r\n      },\r\n      {\r\n        label: 'LABEL_SYSTEM_PROPERTY_UPDATEABLE',\r\n        name: 'updatableName',\r\n        width: 120,\r\n      },\r\n      {\r\n        label: '',\r\n        name: 'systemPropertyId',\r\n        hidden: true,\r\n      },\r\n      {\r\n        label: '',\r\n        name: 'updatable',\r\n        hidden: true,\r\n      },\r\n    ],\r\n    pageData,\r\n  );\r\n\r\n  /******************************************************************\r\n   * Action 함수들\r\n   ******************************************************************/\r\n\r\n  // 메세지 등록/수정/삭제 시 성공 콜백\r\n  const asyncSucCallback = () => {\r\n    setPageState((state) => ({\r\n      ...state,\r\n      openModal: false,\r\n      openDeleteDialog: false,\r\n    }));\r\n    getSystemProperties();\r\n  };\r\n\r\n  // 시스템 속성 데이터 조회\r\n  const [systemProperties, getSystemProperties]: any = useAsyncGetAction(\r\n    () =>\r\n      pageData &&\r\n      getAction('/api/system-properties', {\r\n        propertyGroup: searchPropertyGroup,\r\n      }),\r\n    [pageData],\r\n    {\r\n      skip: false,\r\n      onSuccess: () => {\r\n        setPageState(initPageState);\r\n      },\r\n    },\r\n  );\r\n\r\n  // 시스템 속성 등록\r\n  const [postSystemProperty, postSystemPropertyValid] = useAsyncAction(\r\n    () => postAction('/api/system-properties', form),\r\n    {\r\n      onSuccess: asyncSucCallback,\r\n    },\r\n  );\r\n\r\n  // 시스템 속성 수정\r\n  const [putSystemProperty, putSystemPropertyValid] = useAsyncAction(\r\n    () => putAction('/api/system-properties/' + row.systemPropertyId, form),\r\n    {\r\n      onSuccess: asyncSucCallback,\r\n    },\r\n  );\r\n\r\n  // 시스템 속성 삭제\r\n  const [deleteSystemProperty] = useAsyncAction(\r\n    () => deleteAction('/api/system-properties/' + row.systemPropertyId),\r\n    {\r\n      onSuccess: asyncSucCallback,\r\n      onError: () => {\r\n        setPageState((state) => ({\r\n          ...state,\r\n          openDeleteDialog: false,\r\n        }));\r\n      },\r\n    },\r\n  );\r\n\r\n  /******************************************************************\r\n   * 클라이언트 함수들\r\n   ******************************************************************/\r\n  // 테이블 버튼들\r\n  const buttonInfos: ButtonInfoProps[] = [\r\n    {\r\n      id: 'BTN_SYSTEM_PROPERTY_ADD',\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPageState((state) => ({\r\n          ...state,\r\n          disableItem: false,\r\n          openModal: true,\r\n        }));\r\n        buttonType = 'post';\r\n\r\n        resetForm();\r\n      },\r\n    },\r\n    {\r\n      id: 'BTN_SYSTEM_PROPERTY_MODIFY',\r\n      disable: pageState.disableModifyButton,\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPageState((state) => ({\r\n          ...state,\r\n          disableItem: true,\r\n          openModal: true,\r\n        }));\r\n        buttonType = 'put';\r\n\r\n        replaceForm({\r\n          propertyGroup: row.propertyGroup,\r\n          property: row.property,\r\n          value: row.value,\r\n          description: row.description,\r\n          updatable: row.updatable ? 'true' : 'false',\r\n        });\r\n      },\r\n    },\r\n    {\r\n      id: 'BTN_SYSTEM_PROPERTY_DELETE',\r\n      disable: pageState.disableDeleteButton,\r\n      onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPageState((state) => ({ ...state, openDeleteDialog: true }));\r\n      },\r\n    },\r\n  ];\r\n  const buttons = useButtons(pageData && pageData.buttonMap, buttonInfos);\r\n\r\n  // 시스템 속성 조회\r\n  const onSearchSystemProperty = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    getSystemProperties();\r\n  };\r\n\r\n  // 테이블 select 시 콜백\r\n  const onSelectRow = useCallback((id: string, rowValue: any) => {\r\n    row = rowValue;\r\n    setPageState((state) => ({\r\n      ...state,\r\n      disableModifyButton: !row.updatable,\r\n      disableDeleteButton: false,\r\n    }));\r\n  }, []);\r\n\r\n  // 시스템 속성 저장\r\n  const onSaveSystemProperty = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (buttonType === 'post') {\r\n      postSystemProperty();\r\n    } else if (buttonType === 'put') {\r\n      putSystemProperty();\r\n    }\r\n  };\r\n\r\n  // Validation\r\n  const systemPropertyValid = mergeValid([\r\n    postSystemPropertyValid,\r\n    putSystemPropertyValid,\r\n  ]);\r\n\r\n  // 페이지 데이터 로딩 전엔 Loading 표시\r\n  if (!pageData) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DeleteDialog\r\n        visible={pageState.openDeleteDialog}\r\n        onConfirm={deleteSystemProperty}\r\n        onCancel={() =>\r\n          setPageState((state) => ({ ...state, openDeleteDialog: false }))\r\n        }\r\n      />\r\n\r\n      <PageHeaderInfo pageData={pageData} />\r\n\r\n      <Form onSubmit={onSearchSystemProperty}>\r\n        <Row>\r\n          <LabelSelect\r\n            label={LABEL_SYSTEM_PROPERTY_GROUP}\r\n            width=\"300px\"\r\n            defaultValue={defaultValue}\r\n            data={propertyGroupType}\r\n            value={searchPropertyGroup}\r\n            onChange={onChangeSearchForm}\r\n            name=\"searchPropertyGroup\"\r\n          />\r\n        </Row>\r\n        <InFormContainer align=\"right\">\r\n          <SearchButton />\r\n        </InFormContainer>\r\n      </Form>\r\n\r\n      <Table\r\n        caption={LABEL_SYSTEM_PROPERTY_LIST}\r\n        model={model}\r\n        buttons={buttons}\r\n        data={systemProperties ? systemProperties.content : []}\r\n        onSelectRow={onSelectRow}\r\n      />\r\n\r\n      <Modal\r\n        visible={pageState.openModal}\r\n        title={LABEL_SYSTEM_PROPERTY_CAPTION}\r\n      >\r\n        <Form onSubmit={onSaveSystemProperty}>\r\n          <Row>\r\n            <LabelSelect\r\n              required\r\n              label={LABEL_SYSTEM_PROPERTY_GROUP}\r\n              defaultValue={defaultValue}\r\n              data={propertyGroupType}\r\n              value={propertyGroup}\r\n              onChange={onChangeForm}\r\n              name=\"propertyGroup\"\r\n              disabled={pageState.disableItem}\r\n              validation={systemPropertyValid.propertyGroup}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <LabelInput\r\n              required\r\n              label={LABEL_SYSTEM_PROPERTY_PROPERTY}\r\n              value={property}\r\n              onChange={onChangeForm}\r\n              name=\"property\"\r\n              disabled={pageState.disableItem}\r\n              validation={systemPropertyValid.property}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <LabelInput\r\n              required\r\n              label={LABEL_SYSTEM_PROPERTY_VALUE}\r\n              value={value}\r\n              onChange={onChangeForm}\r\n              name=\"value\"\r\n              validation={systemPropertyValid.value}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <LabelInput\r\n              label={LABEL_SYSTEM_PROPERTY_DESCRIPTION}\r\n              value={description}\r\n              onChange={onChangeForm}\r\n              name=\"description\"\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <LabelSelect\r\n              required\r\n              label={LABEL_SYSTEM_PROPERTY_UPDATEABLE}\r\n              data={updatableCodes}\r\n              value={updatable}\r\n              onChange={onChangeForm}\r\n              name=\"updatable\"\r\n              validation={systemPropertyValid.updatable}\r\n            />\r\n          </Row>\r\n          <InFormContainer>\r\n            <SaveButton />\r\n            <CloseButton\r\n              onClick={() =>\r\n                setPageState((state) => ({ ...state, openModal: false }))\r\n              }\r\n            />\r\n          </InFormContainer>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SystemProperty;\r\n","C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\common\\mergeValid.ts",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useButtons.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useTableModel.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useLabels.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\common\\commonValue.ts",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\components\\PageHeaderInfo.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\pages\\DefaultPage.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useAsyncGetAction.tsx",["153"],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\App.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\hooks\\useAsyncAction.tsx",[],"C:\\Users\\MJ\\dev\\my-project\\react-project\\doif-projectv-frontend\\src\\common\\issueAccessToken.ts",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":48,"column":10,"nodeType":"160","messageId":"161","endLine":48,"endColumn":19},{"ruleId":"162","severity":1,"message":"163","line":494,"column":17,"nodeType":"164","endLine":494,"endColumn":49},{"ruleId":"154","replacedBy":"165"},{"ruleId":"156","replacedBy":"166"},{"ruleId":"158","severity":1,"message":"167","line":7,"column":3,"nodeType":"160","messageId":"161","endLine":7,"endColumn":21},{"ruleId":"158","severity":1,"message":"168","line":10,"column":3,"nodeType":"160","messageId":"161","endLine":10,"endColumn":13},{"ruleId":"158","severity":1,"message":"169","line":19,"column":10,"nodeType":"160","messageId":"161","endLine":19,"endColumn":16},{"ruleId":"158","severity":1,"message":"170","line":74,"column":42,"nodeType":"160","messageId":"161","endLine":74,"endColumn":59},{"ruleId":"158","severity":1,"message":"171","line":74,"column":61,"nodeType":"160","messageId":"161","endLine":74,"endColumn":76},{"ruleId":"158","severity":1,"message":"167","line":7,"column":3,"nodeType":"160","messageId":"161","endLine":7,"endColumn":21},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"@typescript-eslint/no-unused-vars","'menuItems' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["172"],["173"],"'isValidAccessToken' is defined but never used.","'PageHeader' is defined but never used.","'Helmet' is defined but never used.","'replaceSearchForm' is assigned a value but never used.","'resetSearchForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]